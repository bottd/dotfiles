@startuml
!theme plain
skinparam linetype ortho

package "Conditional Module System" {
  class "ConditionalFunctions" {
    +import(condition, path): AttrSet
    +withFeature(flag, path): AttrSet
    +onlyOn(system, path, currentSystem): AttrSet
    +onlyForHost(targetHost, path, currentHost): AttrSet
    +onlyNixOS(path, system): AttrSet
    +onlyDarwin(path, system): AttrSet
    +merge(modules): AttrSet
  }
  
  note right of ConditionalFunctions
    Functions for conditionally importing
    modules based on various criteria
  end note
}

package "Feature System" {
  class "FeatureFlags" {
    +desktop: {
      enable: bool
      wayland: bool
      hyprland: bool
      ...
    }
    +hardware: {
      bluetooth: bool
      printing: bool
      ...
    }
    +development: {
      enable: bool
      languages: {
        python: bool
        rust: bool
        ...
      }
      ...
    }
    ...
  }
  
  note right of FeatureFlags
    Feature flags control which modules
    are loaded and enabled
  end note
}

package "Module Loading Examples" {
  class "DesktopModules" {
    imports = [
      # Always load base modules
      base,
      common,
      
      # Load desktop modules conditionally
      withFeature(desktop.enable, display-server),
      withFeature(desktop.wayland, wayland),
      withFeature(desktop.hyprland, hyprland),
      
      # Platform-specific modules
      onlyNixOS(x11, system),
      onlyDarwin(quartz, system),
      
      # Hardware-specific modules
      withFeature(hardware.nvidia, nvidia),
      withFeature(hardware.intel, intel),
      
      # Combine multiple conditions
      merge([
        withFeature(dev.python, pythonDev),
        withFeature(dev.rust, rustDev),
      ])
    ]
  }
  
  note right of DesktopModules
    Host configurations use conditional
    functions to control which modules
    are loaded
  end note
}

package "Hosts" {
  class "Desktop" {
    features.desktop = {
      enable = true;
      wayland = true;
      hyprland = true;
    }
    
    features.hardware = {
      nvidia = true;
      ...
    }
  }
  
  class "Laptop" {
    features.desktop = {
      enable = true;
      wayland = true;
      hyprland = false;
    }
    
    features.hardware = {
      intel = true;
      ...
    }
  }
  
  class "Server" {
    features.desktop = {
      enable = false;
      ...
    }
  }
}

' Relationships
ConditionalFunctions --> DesktopModules : used by
FeatureFlags --> DesktopModules : controls
Desktop --> FeatureFlags : sets
Laptop --> FeatureFlags : sets
Server --> FeatureFlags : sets

@enduml