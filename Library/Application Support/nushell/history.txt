exit
curl -sS https://starship.rs/install.sh | sh
$nu.env-path
brew
clear
$nu.env-path
clear
git
clear
ls
cd workspace/drake-dot-dev/
ls
nvim 
vim
neovim
which brew
let-env PATH = ($env.PATH | append "/usr/local/bin")
neovim .
nvim .
ls
..
ls
cd marvel-by-scene
ls
nvim .
gst
git
git status
git stash
clear
cd ..
clear
which zsh
chsh /bin/zsh
chsh -s /bin/zsh
exit
help save
let test = test.txt
let test = "test.txt"
"poop" | save $test
ls
vim test.txt
rm test.tsxt
rm test.txt
ls
datetime now | format "%Y-%m-%d"
date now | format "%Y-%m-%d"
date now | format date "%Y-%m-%d"
date now
print(date now | format date "%Y-%m-%d")
print $"(date now | format date "%Y-%m-%d")"
let a = date now
a
$a
$a | format date "%Y-%m-%d"
$a | date format "%Y-%m-%d"
nushell -v
exit
mut test = {}
$test | set "key1" {} | set "key2" true
$test.key1 = {}
$test.key1.key2 = true
$test 
$test.key1
$test2 = "abc"
let test2 = "abc"
$test.$test2 = "yo"
$test
$test.($test2) = "3"
$test | set $test2 "4"
$test
$test2
$test.($test2) = "4"
$test.$"($test2)" = "4"
$test[$test2] = 'poop'
$test | get $test2
$test3 = { $test2: 'def' }
let test3 = { $test2: 'def' }
$test3
$test | insert $test2 'dez'
$test | get $test2
$test
$test = $test | insert $test2 'dez'
$test = $test | insert { $test2: 'dez' }
$test = $test | insert $test2 'deb'
$test
$test | insert $test2 'dev'
$test
mut D = {}
$D = $D | insert $test2 'poop'
$D | insert $test2 'asdfs'
$D
$D.a = 'yo'
$D
mut a = {}
let key = "name"
$a = $a | insert $key "value"
$a | insert $key "value"
mut b = []
$b | insert $key "value"
$b
$b = $b | insert $key "value"
$a = ($a | insert $key "value")
$a
$a = ($a | insert $key "value2")
let b = "boobin"
$a = ($a | insert $b "value2")
$a
$a.($b)
$a.$b
$a.$"($b)"
$a | get $b
exit
mut a = {}
let key1 = "a"
let key2 = "b"
let key3 = "c"
let key4 - "d"
let key4 = "d"
$a + ($a | insert $key1 {})
$a + ($a | insert $key1 { $key2: "cool stuffz" })
$a = ($a | insert $key1 { $key2: "cool stuffz" })
$a
$a.b
$a.a
mut z = $a.a
$z
$z = ($z | insert $key4 "abba")
$z
$a
$a.a
$a.a = $z
$a.a
$a = ($a | get $key1 | insert $key3 "boo")
$a
$a = ($a | insert $key1 {})
$a
if {} {print "yo!"}
$a
if ($a | get z) == null { print "party" }
mut author = {}
mut aut
mut aut = {}
$aut = { $key1: {} }
$aut
$a
$key2
$a = ($a | insert $key2 "new boy")
$a = ($a | set $key2 "new boy")
$z
$a = {}
$a = ($a | insert $key1 {})
$a
$a = ($a | upsert $key1 true)
$a
$a = ($a | upsert $key1 {})
$a
$a = ($a | upsert $key2 {})
$a
$a | each {|rec| print $rec}
$a | each {|rec| print $"Yo: ($rec)"}
$a | enumerate
$a | enumerate | each {|rec| print $"Poop: ($rec)"}
$a | values | each {|rec| print $"Poop ($rec)"}
$a
$a = ($a | upsert $key3 { field3: "deep" })
$a
$a | values
$a | values | each {|rec| print $"Rec: ($rec)"}
$a | values | each {|rec| print $"Rec: ($rec?.field3)"}
$a | values | enumerate | each {|rec| print $"Rec: ($rec?.field3)"}
$a | values | enumerate | each {|rec| print $"Rec: ($rec)"}
$a | pairs
$a
$a | keys
$a | transpose
$a | columns
$a | columns | each {|col| print $"testing ($col)" }
exit
mut a = []
$a
$a = {}
mut b = { c: {} }
b | get c
$b | get c
$b | get d
$a | where c | print "yo!"
$a | where c | each {|col| print "yo!"}
$a | where c !== null | each {|col| print "yo!"}
ls
clear
ls
$a
$b
$b | select c
$b | select d
$b | select d | empty?
let z = ($b | select d | empty?)
ls
let z = ($b | columns | where {|col| $col == "c"})
$z
let z = ($b | columns | where {|col| $col == "d"})
$z
let z = ($b | columns | where {|col| $col == "d"} | empty?)
let z = ($b | columns | where {|col| $col == "d"} | is-empty)
$z
let z = ($b | columns | where {|col| $col == "d"} | is-empty == false)
let z = ($b | columns | where {|col| $col == "d"} | is-empty)
$z
if z { print "yo" }
if $z { print "yo" }
if }z { print "yo" }
if $z == true { print "yo" }
if $z == false { print "yo" }
mut z = {}
[1,2,3] | each {|a| $z = ($z | append a)}
[1,2,3] | each {|a| $z = ($z | insert $a 23)}
let a = [1,2,3]
for b in $a { print $"A?? ($b)" }
datetime now | format "%Y-%m-%d"
date now | format date "%Y-%m-%d"
date now | date format "%Y-%m-%d"
exit
clear
ls
let a = "~/notes/index.norg"
$a | path
let p = $a | path parse
$p
"A test line \n" | save $p -a
$p | path exists
$a | path exists
"A test line \n" | save $a -a
cd ..
..
"A test line\n" | save "/notes/index.norg" -a
"A test line\n" | save "notes/index.norg" -a
"a.norg" | replace ".norg" ""
"a.norg" | string replace ".norg" ""
"a.norg" | str replace ".norg" ""
"a.norg" | str replace '.norg' ''
"a/path" | path | into string 
"ab.cd/e$f" | str replace -a ["$","c"] ""
ls
"ab.cd/e$f" | str replace -r "[.;:%\$]" ""
str replace -h
"ab.cd/e$f" | str replace '[.;:%\$]' ""
exit
ls
ls | each {| $it | if $it.type == "File" && $it.name | match "*.fnl" { echo $it.path | exec fennel --compile } } | str collect > compiled.lua
ls | each {| $it | if $it.type == "File" and $it.name | match "*.fnl" { echo $it.path | exec fennel --compile } } | str collect > compiled.lua
clear
ls
..
ls
touch compile.nu
files
ls
ls **/*.fnl
ls
./compile.nu
nu compile.nu
exit
ls
exit
ls
exit
fish
exit
brew
chsh -s /bin/zsh
ls
brew
exit
brew
clera
clear
$nu.env-path
ls ~/Library
clear
$nu.env-path
$nu.config-path
exit
starship init nu | save -f ~/.cache/starship/init.nu
exit
mkdir ~/.cache/starship<\n>
starship init nu | save -f ~/.cache/starship/init.nu<\n>
brew
cargo
exit
curl -sS https://starship.rs/install.sh | sh<\n>
$nu.config-path
exit
config set prompt `echo $(starship prompt)`
exit
nu
clear
exit
ls
exit
ls
exit
ls
exit
npm
exit
ls
gst
yadm status
vim fnl
cd ~/
cd fnl
ls
vim
nvim
exit
ls
cd $env.config
$env.config
$env.config_nu
cd $nu.env-path
$nu.env-path
cd Library/Application Support/nushell
cd Library/Application\ Support/nushell
cd ~/Library/Application\ Support/
ls
cd Library/ApplicationSupport/
ls
cd nushell
nvim env.nu
exit
starship
brew
cargo install starship --locked
exit
cd Library/ApplicationSupport/
cd nushell
starship
vim env.nu
exit
cd Library/ApplicationSupport/nushell
ls
vim env.nu
nvim env.nu
exit
ls
cd workspace/drake-dot-dev
ls
vim
cd Library/ApplicationSupport/nushell
vim env.nu
nvim 
exit
exit
cd workspace/drake-dot-dev
gst
git status
git add src
git commit -m "Update"
git push
npm run format
git status
git add src
git commit -m "format"
ggp
git push
exit
vim
cd Library/ApplicationSupport/nushell
ls
vim config.nu
vim
ls
cat ~/.config/fish/config.drakebott.fish
cd Library/ApplicationSupport/nushell
vim env.nu
exit
exit
vim
cd ~/.config/nvim
vim
yadm status
yadm checkout fnl/plugins/neorg.fnl
yadm checkout lua/plugins/neorg.lua
yadm diff
brew reinstall neovim
ls
clear
vim
cd ~/workspace/vis-term/
ls
cd VisTerm
ls
vim
cd ~/workspace/drake-dot-dev
exit
exit
vim
gst
git status
git add src
git status
npm run dev
git commit -m "Publish"
vim
gst
git push
clear
exit
cd Library/ApplicationSupport/nushell
ls
touch git.nu
vim git.nu
ls
vim config.nu
exit
cd Library/ApplicationSupport/nushell
ls
mkdir git
touch git/mod.nu
vim
nvim
exit
cd Library/ApplicationSupport/nushell
ls
ls git
mv git/mod.nu git.nu
ls
rm -rf git
vim
nvim
exit
ls
cd workspace/drake-dot-dev
ls
vim
ls
npm run format
gst
git status
git diff
gst
git status
git add src/routes/posts/javascript-sound-types.md
git add src/routes/posts/soundness-flow.md
gst
git status
git commit -m "Rename"
git push
git status
vim
nvim
gst
git status
git add src/routes/posts/why-vim.md
git commit -m "Update"
git push
nvim
ls
vim
exit
nvim
nvim
gst
git status
git add src
git commit -m "Update"
git push
ls
nvim
exit
vim
nvim
npm run dev
clear
gst
exit
cd ../united-reason
ls
git pull
npm i
brew reinstall neovim
nvim
cd ~/.config/nvim
vim
nvim
vim
nvim
yadm status
yadm add fnl
yadm add lazy-lock.json
yadm add lua
yadm status
yadm commit -m "Update"
yadm push
brew install --cask neovide
brew upgrade neovide
brew upgrade --cask neovide
cargo uninstall neovide
brew install --cask neovide
ls
vim ~/.config/fish/config.fish
nvim
vim
nvim
ls
clear
ls
vim
nvim
yadm status
ls ~/workspace/github
clear
exit
..
cd drake-dot-dev/
ls
nvim
exit
neovide workspace/drake-dot-dev/
cd workspace/drake-dot-dev
neovide
gst
git status
yadm status
yadm add ~/.config/fish/config.fish
yadm add ~/.config/nvim/fnl
yadm add ~/.config/nvim/lua
brew reinstall neovim
nvim
yadm status
yadm add ~/.config/nvim/lazy-lock.json
yadm diff
yadm status
yadm commit -m "Update - neovide"
yadm push
cd ~/.config/fish/config.fish
nvim ~/.config/fish/config.fish
yadm status
ls
nvim ~/.config/fish/fish_plugins
cd ~/.config/nvim
ls
nvim
exit
nvim ~/fnl
exit
cd ~/.config/nvim
neovide .
nvim 
gst
exit
cd .config/nvim
neovide .
nvim .
gst
yadm status
yadm checkout fnl/plugins/neorg.fnl
yadm checkout lua/plugins/neorg.lua
yadm status
yadm add fnl
yadm add lua
ls
nvim .
nvim
yadm checkout lua/plugins/neorg.lua
yadm checkout fnl/plugins/neorg.fnl
nvim
nvim 
neovide .
nvim lua
exit
nvim
exit
yadm status
yadm diff
clear
yadm status
yadm checkout .config/nvim/fnl/plugins/neorg.fnl
yadm checkout .config/nvim/lua
yadm status
brew reinstall neovim
vim
nvim
yadm status
yadm add .config/nvim/lazy-lock.json
yadm commit -m "Update"
yadm push
nvim
ls
nvim
cd .config/nvim
ls
vim
nvim
gst
ls
nvim
yadm status
yadm checkout .config/nvim
yadm push
yadm status
yadm checkout .config/nvim/
yadm checkout .config/nvim/*
yadm checkout . 
yadm status
clear
exit
ls
clear
neovide .
cd .config/nvim
nvim
vim
nvim
clear
nvim
neovide .
nvim
cd ~/workspace/github
ls
git clone  https://github.com/neovide/neovide.git
cd neovide
vim
cd
cd Library/ApplicationSupport/nushell
ls
nvim git.nu
gst
nvim
ls
config nu
$env.config
echo $env
echo $env.config
clear
exity
exit
cd Library/ApplicationSupport/nushell
ls
vim
nvim
exit
cd 
cd Library/ApplicationSupport/nushell
ls
exit
nvim
exit
gst
cd 
cd wor
cd workspace/drake
cd workspace/drake-dot-dev
gst
yadm status
cd
yadm status
yadm add .config
yadm status
yadm reset
yadm status
yadm add .config/nvim
yadm status
yadm add Library/ApplicationSupport/nushell/
cd Library/ApplicationSupport/nushell
yadm status
